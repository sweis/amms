syntax = "proto3";

// Aggregate Mobility Metrics Schema

message Metrics {
  // The time period and cycle length determine how data will be aggregated.
  // Times will be bucketed by the period and then aggregated on a cycle. For
  // example, a period of 3600 seconds and a cycle length of 168 will aggregate
  // same hours of a week together.
  uint64 start_time = 1;
  uint64 end_time = 2;
  uint32 period_seconds = 3;
  uint32 cycle_length = 4;

  // Maps unique uint32s to freeform strings that identify geographic areas
  map<uint32, string> geo_ids = 5;

  // Overall time series for trips, distance, and duration
  map<uint32, uint32> total_trips = 6;
  map<uint32, float> total_distance = 7;
  map<uint32, float> total_duration = 8;

  // Maps of hours to geographic IDs for trip volumes, pickups and dropoffs
  map<uint32, IntMap> trip_volumes = 9;
  map<uint32, IntMap> pickups = 10;
  map<uint32, IntMap> dropoffs = 11;

  // Maps of hours to geographic IDs for available cars and on_street
  // (including) available
  map<uint32, IntMap> availability = 12;
  map<uint32, IntMap> on_street = 13;

  // Flows maps hours to pairs of pickup and dropoff geographic IDs
  // For example:
  //   flows[hour].data[pickup].data[dropoff]
  map<uint32, Int2DMap> flows = 14;

  // A privacy level which may either be used as a k-anonymity
  // or l-diversity metric
  uint32 privacy_level = 15;

  // Trip volumes will be subject to privacy_level interpreted as k-anonymity.
  // This is the count of trips that were suppressed from the output.
  uint32 trip_volume_suppressed = 16;

  // Flows will be subject to privacy_level interpreted as l-diversity
  // This is the count of flows that were suppressed from the output.
  uint32 flows_suppressed = 17;

  // These are defined because we cannot do nested maps in protobufs.
  // Otherwise, we'd just do map<uint32, map<uint32, map<uint32, uint32>>>
  message Int2DMap {
    map<uint32, IntMap> data = 1;
  }

  message IntMap {
    map<uint32, uint32> data = 1;
  }
}
